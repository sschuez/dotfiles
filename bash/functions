# Compression
compress() { tar -czf "${1%/}.tar.gz" "${1%/}"; }
alias decompress="tar -xzf"

# Transcode a video to a good-balance 1080p that's great for sharing online
transcode-video-1080p() {
  ffmpeg -i $1 -vf scale=1920:1080 -c:v libx264 -preset fast -crf 23 -c:a copy ${1%.*}-1080p.mp4
}

# Transcode a video to a good-balance 4K that's great for sharing online
transcode-video-4K() {
  ffmpeg -i $1 -c:v libx265 -preset slow -crf 24 -c:a aac -b:a 192k ${1%.*}-optimized.mp4
}

# Image conversion functions
# Convert any image to JPG with high quality (great for wallpapers)
img2jpg() {
  if command -v magick &> /dev/null; then
    magick "$1" -quality 95 -strip "${1%.*}.jpg"
  else
    echo "Error: ImageMagick is not installed. Install it with: brew install imagemagick"
    return 1
  fi
}

# Convert any image to smaller JPG for sharing online
img2jpg-small() {
  if command -v magick &> /dev/null; then
    magick "$1" -resize 1080x\> -quality 95 -strip "${1%.*}-small.jpg"
  else
    echo "Error: ImageMagick is not installed. Install it with: brew install imagemagick"
    return 1
  fi
}

# Convert any image to compressed-but-lossless PNG
img2png() {
  if command -v magick &> /dev/null; then
    magick "$1" -strip -define png:compression-filter=5 \
      -define png:compression-level=9 \
      -define png:compression-strategy=1 \
      -define png:exclude-chunk=all \
      "${1%.*}.png"
  else
    echo "Error: ImageMagick is not installed. Install it with: brew install imagemagick"
    return 1
  fi
}

# Legacy function for backward compatibility
transcode-png2jpg() {
  img2jpg "$@"
}

# Function to update the tmux window name
update_tmux_window_name() {
  if [[ -n "$TMUX" ]]; then
    tmux rename-window "$(basename "$PWD")"
  fi
}

# Agent cleanup function that handles directory changes properly
agent-cleanup() {
  # Store the main worktree path before running the script
  local main_worktree=$(git worktree list 2>/dev/null | head -n1 | awk '{print $1}')
  
  # Run the actual cleanup script
  ~/code/dotfiles/scripts/agent-cleanup.sh "$@"
  
  # If we're in a non-existent directory after cleanup, switch to main
  if [ ! -d "$PWD" ]; then
    if [ -n "$main_worktree" ] && [ -d "$main_worktree" ]; then
      cd "$main_worktree"
      echo "📍 Switched to main worktree: $main_worktree"
    else
      cd ~
      echo "📍 Switched to home directory"
    fi
  fi
}